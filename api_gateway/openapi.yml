openapi: 3.0.3
info:
  title: API Gateway Service
  description: API Gateway for user and post services
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Local development server
paths:
  /users/auth/register:
    post:
      tags:
        - users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful registration
        '503':
          description: User service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "user_service is unavailable"

  /users/auth/login:
    post:
      tags:
        - users
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful login
        '503':
          description: User service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "user_service is unavailable"

  /users/auth/logout:
    post:
      tags:
        - users
      summary: Logout user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful logout
        '503':
          description: User service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "user_service is unavailable"

  /users/me:
    get:
      tags:
        - users
      summary: Get current user info
      responses:
        '200':
          description: Successful operation
        '503':
          description: User service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "user_service is unavailable"
    patch:
      tags:
        - users
      summary: Update current user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Successful update
        '503':
          description: User service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "user_service is unavailable"

  /posts:
    post:
      tags:
        - posts
      summary: Create a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        '200':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Error details from gRPC service"
        '401':
          description: Unauthorized
    get:
      tags:
        - posts
      summary: List all posts
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: page_size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostListResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Error details from gRPC service"
        '401':
          description: Unauthorized

  /posts/{post_id}:
    get:
      tags:
        - posts
      summary: Get post by ID
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Permission denied"
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Post not found"
    put:
      tags:
        - posts
      summary: Update post
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Permission denied"
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Post not found"
    delete:
      tags:
        - posts
      summary: Delete post
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Permission denied"
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "Post not found"

components:
  schemas:
    PostCreate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        is_private:
          type: boolean
          default: false
        tags:
          type: array
          items:
            type: string
          default: []
      required:
        - title
        - description

    PostUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        is_private:
          type: boolean
        tags:
          type: array
          items:
            type: string

    PostResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        creator_id:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        is_private:
          type: boolean
        tags:
          type: array
          items:
            type: string
      required:
        - id
        - title
        - description
        - creator_id
        - created_at
        - updated_at
        - is_private
        - tags

    PostListResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostResponse'
        total:
          type: integer
        page:
          type: integer
        page_size:
          type: integer
      required:
        - posts
        - total
        - page
        - page_size